---
- name: Configure cluster
  hosts: cluster
  become: true
  gather_facts: false
  tags:
    - cluster
  tasks:
    - name: Disable SELinux
      ansible.posix.selinux:
        state: disabled
      register: disable_selinux

    - name: Reboot workers after disabling SELinux # noqa: no-handler
      ansible.builtin.reboot:
        reboot_timeout: 120
      when: inventory_hostname != "master" and disable_selinux.changed is true

    - name: Reboot master after disabling SELinux # noqa: no-handler
      ansible.builtin.reboot:
        reboot_timeout: 120
      when: inventory_hostname == "master" and disable_selinux.changed is true

    - name: Add Kubernetes yum repo
      ansible.builtin.yum_repository:
        name: kubernetes
        description: Kubernetes
        baseurl: https://pkgs.k8s.io/core:/stable:/v1.30/rpm/
        enabled: true
        gpgkey: https://pkgs.k8s.io/core:/stable:/v1.30/rpm/repodata/repomd.xml.key
        gpgcheck: true

    - name: Add CRI-O yum repo
      ansible.builtin.yum_repository:
        name: cri-o
        description: CRI-O
        baseurl: https://pkgs.k8s.io/addons:/cri-o:/stable:/v1.30/rpm/
        enabled: true
        gpgkey: https://pkgs.k8s.io/addons:/cri-o:/stable:/v1.30/rpm/repodata/repomd.xml.key
        gpgcheck: true

    - name: Install container-selinux, cri-o, kubelet, kubeadm, kubectl
      ansible.builtin.dnf:
        name:
          - container-selinux
          - cri-o
          - kubelet
          - kubeadm

    - name: Disable swap
      ansible.builtin.command: swapoff -a
      changed_when: true

    - name: Load br_netfilter kernel module
      community.general.modprobe:
        name: br_netfilter
        state: present

    - name: Enable IP packet forwarding
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present

    - name: Add NET_RAW capability to CRI-O to allow ping inside pods
      ansible.builtin.copy:
        dest: /etc/crio/crio.conf.d/20-crio.conf
        content: |
          [crio.runtime]
          default_capabilities = [
            "CHOWN",
            "DAC_OVERRIDE",
            "FSETID",
            "FOWNER",
            "SETGID",
            "SETUID",
            "SETPCAP",
            "NET_BIND_SERVICE",
            "KILL",
            "NET_RAW",
          ]
        mode: "0644"
        owner: root
        group: root

    - name: Enable CRI-O service
      ansible.builtin.service:
        name: crio.service
        state: restarted
        enabled: true

    - name: Enable kubelet service
      ansible.builtin.service:
        name: kubelet
        state: started
        enabled: true

- name: Configure master
  hosts: master
  become: true
  gather_facts: false
  tags:
    - master
  tasks:
    # - name: Install kubectl
    #   ansible.builtin.dnf:
    #     name: kubectl

    # - name: Add bash completion for kubectl
    #   ansible.builtin.lineinfile:
    #     line: "source <(kubectl completion bash)"
    #     path: /home/ec2-user/.bashrc

    # - name: Install kubernetes python package
    #   ansible.builtin.pip:
    #     name: kubernetes

    - name: Download kubernetes images
      ansible.builtin.command: kubeadm config images pull
      changed_when: true

    - name: Initialize kubernetes controller
      ansible.builtin.command: |
        kubeadm init --control-plane-endpoint "{{ ansible_host }}:6443"
      changed_when: true

    # - name: Ensure .kube directory exists
    #   ansible.builtin.file:
    #     dest: /home/ec2-user/.kube
    #     state: directory
    #     owner: ec2-user
    #     group: ec2-user
    #     mode: "0755"

    # - name: Copy kubectl config to .kube directory
    #   ansible.builtin.copy:
    #     src: /etc/kubernetes/admin.conf
    #     remote_src: true
    #     dest: /home/ec2-user/.kube/config
    #     owner: ec2-user
    #     group: ec2-user
    #     mode: "0600"

    - name: Copy kubectl config to local machine
      ansible.builtin.fetch:
        src: /etc/kubernetes/admin.conf
        dest: ../kubeconfig
        flat: true

- name: Get kubeadm join command from master
  hosts: master
  become: true
  gather_facts: false
  tags:
    - join-workers
  tasks:
    - name: Get kubeadm join command
      ansible.builtin.command: kubeadm token create --print-join-command
      register: kubeadm_join_command
      changed_when: false

- name: Configure workers
  hosts: workers
  become: true
  gather_facts: false
  tags:
    - join-workers
  tasks:
    - name: Join kubernetes cluster
      ansible.builtin.command: "{{ hostvars['master'].kubeadm_join_command.stdout }}"
      changed_when: true

- name: Print nodes
  hosts: localhost
  become: false
  gather_facts: false
  environment:
    KUBECONFIG: "../kubeconfig"
  tags:
    - print
  tasks:
    - name: Get nodes
      ansible.builtin.command: kubectl get nodes -owide
      register: kubectl_get_nodes
      changed_when: false

    - name: Print nodes
      ansible.builtin.debug:
        var: kubectl_get_nodes.stdout_lines
